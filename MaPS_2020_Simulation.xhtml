<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>MaPS_EJSS</title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function MaPS_2020(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }


  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {

    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {

    };
  };

  _model._readParameters = function(json) {
  };

  _model._readParametersPublic = function(json) {
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
  });

  _model.addToReset(function() {
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "Front End", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new MaPS_2020_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function MaPS_2020_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = MaPS_2020_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./MaPS_2020_Intro_1.html');

  return _view;
} // end of main function

function MaPS_2020_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"threePanelsPanel", _view._topFrame) // EJsS HtmlView.Front End: declaration of element 'threePanelsPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.threePanelsPanel) // EJsS HtmlView.Front End: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.Front End: declaration of element 'topLabel'
      .setProperty("Text","<h1>MaPS_EJSS</h1>") // EJsS HtmlView.Front End: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.textField,"questionField", _view.labelPanel) // EJsS HtmlView.Front End: declaration of element 'questionField'
      .setProperty("Width","100%") // EJsS HtmlView.Front End: setting property 'Width' for element 'questionField'
      .setProperty("CSS",{"font-size":"1.5vw"}) // EJsS HtmlView.Front End: setting property 'CSS' for element 'questionField'
      .setProperty("Tooltip","Insert your Question here.") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'questionField'
      .setProperty("Value","Insert your question.") // EJsS HtmlView.Front End: setting property 'Value' for element 'questionField'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.threePanelsPanel) // EJsS HtmlView.Front End: declaration of element 'controlPanel'
      .setProperty("Width",400) // EJsS HtmlView.Front End: setting property 'Width' for element 'controlPanel'
      .setProperty("CSS",{"left":"0"}) // EJsS HtmlView.Front End: setting property 'CSS' for element 'controlPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.Front End: setting property 'Display' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"leftTools", _view.controlPanel) // EJsS HtmlView.Front End: declaration of element 'leftTools'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.Front End: setting property 'CSS' for element 'leftTools'
      .setProperty("Display","inline-flex") // EJsS HtmlView.Front End: setting property 'Display' for element 'leftTools'
      ;

    _view._addElement(EJSS_INTERFACE.button,"createBarButton", _view.leftTools) // EJsS HtmlView.Front End: declaration of element 'createBarButton'
      .setProperty("Tooltip","Create Bar") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'createBarButton'
      .setProperty("Text","Create Bar") // EJsS HtmlView.Front End: setting property 'Text' for element 'createBarButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"spacerButton", _view.leftTools) // EJsS HtmlView.Front End: declaration of element 'spacerButton'
      .setProperty("Tooltip","Create Spacer") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'spacerButton'
      .setProperty("Text","Spacer") // EJsS HtmlView.Front End: setting property 'Text' for element 'spacerButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.leftTools) // EJsS HtmlView.Front End: declaration of element 'resetButton'
      .setProperty("Tooltip","Create Brace") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","Brace") // EJsS HtmlView.Front End: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"labelButton", _view.leftTools) // EJsS HtmlView.Front End: declaration of element 'labelButton'
      .setProperty("Tooltip","Create Label") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'labelButton'
      .setProperty("Text","Label") // EJsS HtmlView.Front End: setting property 'Text' for element 'labelButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"rightTools", _view.controlPanel) // EJsS HtmlView.Front End: declaration of element 'rightTools'
      .setProperty("CSS",{ "float" : "right"}) // EJsS HtmlView.Front End: setting property 'CSS' for element 'rightTools'
      .setProperty("Display","inline-flex") // EJsS HtmlView.Front End: setting property 'Display' for element 'rightTools'
      ;

    _view._addElement(EJSS_INTERFACE.button,"dividerButton", _view.rightTools) // EJsS HtmlView.Front End: declaration of element 'dividerButton'
      .setProperty("Tooltip","Divider") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'dividerButton'
      .setProperty("Text","Divider") // EJsS HtmlView.Front End: setting property 'Text' for element 'dividerButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"fractionButton", _view.rightTools) // EJsS HtmlView.Front End: declaration of element 'fractionButton'
      .setProperty("Tooltip","Fraction") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'fractionButton'
      .setProperty("Text","Fraction") // EJsS HtmlView.Front End: setting property 'Text' for element 'fractionButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"ratioButton", _view.rightTools) // EJsS HtmlView.Front End: declaration of element 'ratioButton'
      .setProperty("Tooltip","Ratio") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'ratioButton'
      .setProperty("Text","Ratio") // EJsS HtmlView.Front End: setting property 'Text' for element 'ratioButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"PercentageButton", _view.rightTools) // EJsS HtmlView.Front End: declaration of element 'PercentageButton'
      .setProperty("Tooltip","Percentage") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'PercentageButton'
      .setProperty("Text","Percentage") // EJsS HtmlView.Front End: setting property 'Text' for element 'PercentageButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"AlignLeftButton", _view.rightTools) // EJsS HtmlView.Front End: declaration of element 'AlignLeftButton'
      .setProperty("Tooltip","Align Left") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'AlignLeftButton'
      .setProperty("Text","Align Left") // EJsS HtmlView.Front End: setting property 'Text' for element 'AlignLeftButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"ColorsButton", _view.rightTools) // EJsS HtmlView.Front End: declaration of element 'ColorsButton'
      .setProperty("Tooltip","Colours") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'ColorsButton'
      .setProperty("Text","Colours") // EJsS HtmlView.Front End: setting property 'Text' for element 'ColorsButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"LinesButton", _view.rightTools) // EJsS HtmlView.Front End: declaration of element 'LinesButton'
      .setProperty("Tooltip","Lines") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'LinesButton'
      .setProperty("Text","Lines") // EJsS HtmlView.Front End: setting property 'Text' for element 'LinesButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"RemoveButton", _view.rightTools) // EJsS HtmlView.Front End: declaration of element 'RemoveButton'
      .setProperty("Tooltip","Remove") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'RemoveButton'
      .setProperty("Text","Remove") // EJsS HtmlView.Front End: setting property 'Text' for element 'RemoveButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"ResetButton", _view.rightTools) // EJsS HtmlView.Front End: declaration of element 'ResetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'ResetButton'
      .setProperty("Text","Reset") // EJsS HtmlView.Front End: setting property 'Text' for element 'ResetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"row", _view.threePanelsPanel) // EJsS HtmlView.Front End: declaration of element 'row'
      .setProperty("CSS",{"position":"relative",  "display": "inline-flex",  "left": "0vw",  "margin-left":"0cm",  "margin-right":"0cm",  "margin-top":"0cm",  "margin-bottom":"0cm"}) // EJsS HtmlView.Front End: setting property 'CSS' for element 'row'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"leftpanel", _view.row) // EJsS HtmlView.Front End: declaration of element 'leftpanel'
      .setProperty("Width","70vw") // EJsS HtmlView.Front End: setting property 'Width' for element 'leftpanel'
      .setProperty("CSS",{"display":"inline-block",    "margin":"2px",    "vertical-align": "top",   "position": "relative",   "margin-left": "1vw"}) // EJsS HtmlView.Front End: setting property 'CSS' for element 'leftpanel'
      .setProperty("Background","Cyan") // EJsS HtmlView.Front End: setting property 'Background' for element 'leftpanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.leftpanel) // EJsS HtmlView.Front End: declaration of element 'plottingPanel'
      .setProperty("Height","70vh") // EJsS HtmlView.Front End: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.Front End: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.Front End: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowCoordinates",false) // EJsS HtmlView.Front End: setting property 'ShowCoordinates' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.Front End: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("AxisXShow",false) // EJsS HtmlView.Front End: setting property 'AxisXShow' for element 'plottingPanel'
      .setProperty("MaximumY",100) // EJsS HtmlView.Front End: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",100) // EJsS HtmlView.Front End: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.Front End: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("AxisYShow",false) // EJsS HtmlView.Front End: setting property 'AxisYShow' for element 'plottingPanel'
      .setProperty("MinimumY",0) // EJsS HtmlView.Front End: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.Front End: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.Front End: setting property 'AutoScaleX' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"demoBar", _view.plottingPanel) // EJsS HtmlView.Front End: declaration of element 'demoBar'
      .setProperty("X",50) // EJsS HtmlView.Front End: setting property 'X' for element 'demoBar'
      .setProperty("Y",50) // EJsS HtmlView.Front End: setting property 'Y' for element 'demoBar'
      .setProperty("Visibility",true) // EJsS HtmlView.Front End: setting property 'Visibility' for element 'demoBar'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"bar", _view.demoBar) // EJsS HtmlView.Front End: declaration of element 'bar'
      .setProperty("FillColor","yellow") // EJsS HtmlView.Front End: setting property 'FillColor' for element 'bar'
      .setProperty("MovesGroup",true) // EJsS HtmlView.Front End: setting property 'MovesGroup' for element 'bar'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.Front End: setting property 'ShapeType' for element 'bar'
      .setProperty("Measured",true) // EJsS HtmlView.Front End: setting property 'Measured' for element 'bar'
      .setProperty("SizeX",10) // EJsS HtmlView.Front End: setting property 'SizeX' for element 'bar'
      .setProperty("LineColor","black") // EJsS HtmlView.Front End: setting property 'LineColor' for element 'bar'
      .setProperty("Visibility",true) // EJsS HtmlView.Front End: setting property 'Visibility' for element 'bar'
      .setProperty("SizeY",5) // EJsS HtmlView.Front End: setting property 'SizeY' for element 'bar'
      .setProperty("LineWidth",2) // EJsS HtmlView.Front End: setting property 'LineWidth' for element 'bar'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.Front End: setting property 'EnabledPosition' for element 'bar'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"size", _view.demoBar) // EJsS HtmlView.Front End: declaration of element 'size'
      .setProperty("FillColor","White") // EJsS HtmlView.Front End: setting property 'FillColor' for element 'size'
      .setProperty("SizeX",2) // EJsS HtmlView.Front End: setting property 'SizeX' for element 'size'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.Front End: setting property 'ShapeType' for element 'size'
      .setProperty("X",5) // EJsS HtmlView.Front End: setting property 'X' for element 'size'
      .setProperty("LineColor","Gray") // EJsS HtmlView.Front End: setting property 'LineColor' for element 'size'
      .setProperty("Y",-2.5) // EJsS HtmlView.Front End: setting property 'Y' for element 'size'
      .setProperty("SizeY",2) // EJsS HtmlView.Front End: setting property 'SizeY' for element 'size'
      .setProperty("LineWidth",1) // EJsS HtmlView.Front End: setting property 'LineWidth' for element 'size'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"rightPanel", _view.row) // EJsS HtmlView.Front End: declaration of element 'rightPanel'
      .setProperty("Width","25vw") // EJsS HtmlView.Front End: setting property 'Width' for element 'rightPanel'
      .setProperty("CSS",{"display":"inline-block",    "margin":"2px",    "vertical-align": "top",   "position": "relative",   "margin-left": "1vw"}) // EJsS HtmlView.Front End: setting property 'CSS' for element 'rightPanel'
      .setProperty("Background","Blue") // EJsS HtmlView.Front End: setting property 'Background' for element 'rightPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"workspace", _view.rightPanel) // EJsS HtmlView.Front End: declaration of element 'workspace'
      .setProperty("Height","70vh") // EJsS HtmlView.Front End: setting property 'Height' for element 'workspace'
      .setProperty("Width","100%") // EJsS HtmlView.Front End: setting property 'Width' for element 'workspace'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"workingSpaceText", _view.workspace) // EJsS HtmlView.Front End: declaration of element 'workingSpaceText'
      .setProperty("Text","My Work Space") // EJsS HtmlView.Front End: setting property 'Text' for element 'workingSpaceText'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"answerRow", _view.threePanelsPanel) // EJsS HtmlView.Front End: declaration of element 'answerRow'
      ;

    _view._addElement(EJSS_INTERFACE.textField,"questionField2", _view.answerRow) // EJsS HtmlView.Front End: declaration of element 'questionField2'
      .setProperty("Width","100%") // EJsS HtmlView.Front End: setting property 'Width' for element 'questionField2'
      .setProperty("CSS",{"font-size":"1.5vw"}) // EJsS HtmlView.Front End: setting property 'CSS' for element 'questionField2'
      .setProperty("Tooltip","Put your answer.") // EJsS HtmlView.Front End: setting property 'Tooltip' for element 'questionField2'
      .setProperty("Value","Answer") // EJsS HtmlView.Front End: setting property 'Value' for element 'questionField2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      MaPS_EJSS<br />
      </p>
      <p>
 Fremont Teng
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2020, Fremont Teng. Compiled with EJS 6.0 (191124)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new MaPS_2020("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
